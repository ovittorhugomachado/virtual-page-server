generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            Int                  @id @default(autoincrement())
  name                          String
  email                         String               @unique
  phoneNumber                   String
  password                      String
  status                        UserStatus
  refreshAccessTokenVirtualPage String?
  tokenEmail                    String               @unique
  created_at                    DateTime             @default(now())
  updated_at                    DateTime             @updatedAt
  projects                      Project[]
  passwordResetTokens           PasswordResetToken[]

  @@map("users")
}

model Project {
  id          Int                @id @default(autoincrement())
  userId      Int
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  type        PageType
  status      ProjectStatus
  alert       String //MENSAGEM URGENTE QUE FICA NO TOPO DO PAINEL
  preferences Json
  created_at  DateTime           @default(now())
  updated_at  DateTime           @updatedAt
  analytics   ProjectAnalytics[]

  @@map("projects")
}

model ProjectAnalytics {
  id             Int      @id @default(autoincrement())
  projectId      Int
  project        Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  accessDate     DateTime // DATA E HORARIO DE ACESSO (NODE)
  totalAccesses  Int //ACESSOS TOTAIS (NODE)
  uniqueVisitors Int // VISITANTES UNICOS (NODE)
  salesOrSignups Int // VENDAS, CADASTRO OU INSCRIÇÕES (NODE)
  avgTimeOnPage  Float? // TEMPO MÉDIO DE NAVEGAÇÃO (NODE E FRONT)
  deviceStats    Json? // DISPOSITIVO: DESKTOP OU MOBILE (NODE)
  genderStats    Json? // GÊNEROS (GA4)
  ageStats       Json? // FAIXA ETÁRIA (GA4)
  interestStats  Json? // INTERESSES (GA4)
  leads          Lead[]

  @@map("project_analytics")
}

model Lead {
  id                 Int              @id @default(autoincrement())
  projectAnalyticsId Int
  projectAnalytics   ProjectAnalytics @relation(fields: [projectAnalyticsId], references: [id], onDelete: Cascade)
  name               String? // NOME 
  email              String? // EMAIL
  phone              String? // TELEFONE
  converted          Boolean          @default(false) //CONVERTEU OU NÃO         
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@map("leads")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
}

enum PageType {
  LANDING_PAGE
  CORPORATE_WEBSITE
  CUSTOM_WEBSITE
}

enum ProjectStatus {
  ACTIVE
  FREE_TRIAL
  EXPIRED
  CANCELED
}

enum UserStatus {
  PENDING
  ACTIVE
  CANCELED
}
